{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  //   "scope": "javascript,typescript",
  //   "prefix": "log",
  //   "body": [
  //     "console.log('$1');",
  //     "$2"
  //   ],
  //   "description": "Log output to console"
  // }
  
  // Doc: https://code.visualstudio.com/docs/editor/userdefinedsnippets
  // !!You need to use jade as scope for pug, not pug.!!
  "class":{
    "scope": "jade",
    "prefix": "class",
    "body":[
      "class=\"$0\"",
    ]
  },
  "svgIcon":{
    "scope": "jade",
    "prefix": "svg",
    "body":[
      "svg-icon(iconName=\"$1\" iconWidth=\"$2px\" iconColor=\"$3\")",
    ]
  },
  "arrow function":{
    "scope": "vue,javascript,typescript",
    "prefix": "arrow",
    "body":[
      "($1) => {\n  $0\n}",
    ]
  },
  "props" :{
    "scope": "vue,javascript,typescript",
    "prefix": "props(option)",
    "body":[
      "props: {\n  ${1:name}: {\n    type: $0String,\n    // required: true,\n    // default: true\n  }\n},",
    ]
  },
  "prop" :{
    "scope": "vue,javascript,typescript",
    "prefix": "prop(option)",
    "body":[
      "$1: {",
      "  type: ${2|String,Boolean,Number,Array,Object|},",
      "  ${3|required: true,default: |}$0,",
      "},",
    ]
  },
  "computed" :{
    "scope": "vue,javascript,typescript",
    "prefix": "computed(option)",
    "body":[
      "computed: {\n  ${1:name}() {\n    return ${2:'return value'}\n  }\n},",
    ]
  },
  "computed" :{
    "scope": "vue,javascript,typescript",
    "prefix": "computed(composition)",
    "body":[
      "computed(() => $0)",
    ]
  },
  "data" :{
    "scope": "vue,javascript,typescript",
    "prefix": "data(option)",
    "body":[
      "data() {\n  return {\n    $0\n  }\n},",
    ]
  },
  "methods" :{
    "scope": "vue,javascript,typescript",
    "prefix": "methods(option)",
    "body":[
      "methods: {\n  ${1:name}() {\n    return ${2:'return value'}\n  }\n},",
    ]
  },
  "watch" :{
    "scope": "vue,javascript,typescript",
    "prefix": "watch(option)",
    "body":[
      "watch: {\n  ${1:name}() {\n    $0\n  }\n},",
    ]
  },
  "mounted" :{
    "scope": "vue,javascript,typescript",
    "prefix": "mounted(option)",
    "body":[
      "mounted() {\n  $0\n},",
    ]
  },
  "created" :{
    "scope": "vue,javascript,typescript",
    "prefix": "created(option)",
    "body":[
      "created() {\n  $0\n},",
    ]
  },
  "updated": {
    "scope": "vue,javascript,typescript",
    "prefix": "updated(option)",
    "body": [
      "updated() {",
      "  console.log('update $1', $0)",
      "},"
    ],
  },
  "Record" :{
    "scope": "vue,javascript,typescript",
    "prefix": "record",
    "body":[
      "Record<string, ${1|string,unknown,boolean,number,array,object|}>",
    ]
  },
  "i18n" :{
    "scope": "vue,javascript,typescript",
    "prefix": "i18n.t(",
    "body":[
      "i18n.t('$0')",
    ]
  },
  "interface" :{
    "scope": "vue,javascript,typescript",
    "prefix": "interface",
    "body":[
      "export interface $1 {\n  $0\n}",
    ]
  },
  "SET_STATE" :{
    "scope": "vue,javascript,typescript",
    "prefix": "SET_STATE",
    "body":[
      "commit('SET_STATE', { $0})",
    ]
  },
  ".then" :{
    "scope": "vue,javascript,typescript",
    "prefix": "then",
    "body":[
      ".then(() => {\n  $0\n})",
    ]
  },
  "${}" :{
    "scope": "vue,javascript,typescript",
    "prefix": "$",
    "body":[
      "${$0}",
    ]
  },
  "`${}`" :{
    "scope": "vue,javascript,typescript",
    "prefix": "``",
    "body":[
      "`${$0}",
    ]
  },
  "it" :{
    "scope": "typescript",
    "prefix": "it",
    "body":[
      "it('$1', () => {\n  $0\n})",
    ]
  },
  "bgcolor": {
    "scope": "css,scss",
    "prefix": "bgcolor",
    "body": [
      "background-color: setColor(${1|gray-,blue-|}$0);",
    ]
  },
  "color": {
    "scope": "css,scss",
    "prefix": "color",
    "body": [
      "color: setColor(${1|gray-,blue-|}$0);",
    ]
  },
  "flex": {
    "scope": "css,scss",
    "prefix": "flex",
    "body": [
      "display: flex$0;\njustify-content: ${1|center,flex-end|};\nalign-items: ${2|center,flex-end|};$0",
    ]
  },
  "setColor": {
    "scope": "css,scss",
    "prefix": "setColor",
    "body": [
      "setColor(${1|gray-,blue-|}$0);",
    ]
  },
  "setColors": {
    "scope": "css,scss",
    "prefix": "setColors",
    "body": [
      "@include setColors($1) using (\\$color) {\n  ${2|color,background-color,border|}: $0\\$color;\n}",
    ]
  },
  "include": {
    "scope": "css,scss",
    "prefix": "@include",
    "body": [
      "@include ${1|text-,body-,overline-,pic {\n},stk {\n},cm {\n}|}$0;",
    ]
  },
  "currentColor": {
    "scope": "xml",
    "prefix": "currentColor",
    "body": "currentColor",
    "description": "description for currentColor"
  }
}
